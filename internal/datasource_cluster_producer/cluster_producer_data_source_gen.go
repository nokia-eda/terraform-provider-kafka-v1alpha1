// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_cluster_producer

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func ClusterProducerDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"api_version": schema.StringAttribute{
				Computed: true,
			},
			"hash": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "resource content will be returned as it was at the time of this git hash",
				MarkdownDescription: "resource content will be returned as it was at the time of this git hash",
			},
			"kind": schema.StringAttribute{
				Computed: true,
			},
			"metadata": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"annotations": schema.MapAttribute{
						ElementType: types.StringType,
						Computed:    true,
					},
					"labels": schema.MapAttribute{
						ElementType: types.StringType,
						Computed:    true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
				},
				CustomType: MetadataType{
					ObjectType: types.ObjectType{
						AttrTypes: MetadataValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "name of the ClusterProducer",
				MarkdownDescription: "name of the ClusterProducer",
			},
			"spec": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"brokers": schema.StringAttribute{
						Optional:            true,
						Description:         "Comma separated Kafka brokers list",
						MarkdownDescription: "Comma separated Kafka brokers list",
					},
					"compressioncodec": schema.StringAttribute{
						Optional:            true,
						Description:         "Data compression codec",
						MarkdownDescription: "Data compression codec",
					},
					"exports": schema.ListNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"fields": schema.ListAttribute{
									ElementType:         types.StringType,
									Optional:            true,
									Description:         "list of fields to be exported from the configured EDB table.",
									MarkdownDescription: "list of fields to be exported from the configured EDB table.",
								},
								"mode": schema.StringAttribute{
									Optional:            true,
									Description:         "Export Mode",
									MarkdownDescription: "Export Mode",
								},
								"path": schema.StringAttribute{
									Optional:            true,
									Description:         "The EDB path to export, in the format '.namespace.node.srl.interface'",
									MarkdownDescription: "The EDB path to export, in the format '.namespace.node.srl.interface'",
								},
								"period": schema.StringAttribute{
									Optional:            true,
									Description:         "Export Period. A 1s minimum is enforced.",
									MarkdownDescription: "Export Period. A 1s minimum is enforced.",
								},
								"topic": schema.StringAttribute{
									Optional:            true,
									Description:         "A topic name to which the producer must write\nupdates from this export path",
									MarkdownDescription: "A topic name to which the producer must write\nupdates from this export path",
								},
								"where": schema.StringAttribute{
									Optional:            true,
									Description:         "A where clause to use for the query, e.g. 'oper-state = down'. You can omit enclosing parentheses.",
									MarkdownDescription: "A where clause to use for the query, e.g. 'oper-state = down'. You can omit enclosing parentheses.",
								},
							},
							CustomType: ExportsType{
								ObjectType: types.ObjectType{
									AttrTypes: ExportsValue{}.AttributeTypes(ctx),
								},
							},
						},
						Optional:            true,
						Description:         "Exports is the list of paths to be exported as well as the topic and mode for each.",
						MarkdownDescription: "Exports is the list of paths to be exported as well as the topic and mode for each.",
					},
					"flushfrequency": schema.StringAttribute{
						Optional:            true,
						Description:         "The best-effort frequency of flushes",
						MarkdownDescription: "The best-effort frequency of flushes",
					},
					"maxretry": schema.Int64Attribute{
						Optional:            true,
						Description:         "The total number of times to retry sending a message",
						MarkdownDescription: "The total number of times to retry sending a message",
					},
					"requiredacks": schema.StringAttribute{
						Optional:            true,
						Description:         "Number of replica acknowledgements the broker must see before responding",
						MarkdownDescription: "Number of replica acknowledgements the broker must see before responding",
					},
					"sasl": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"mechanism": schema.StringAttribute{
								Optional:            true,
								Description:         "SASL Mechanism",
								MarkdownDescription: "SASL Mechanism",
							},
							"password": schema.StringAttribute{
								Optional:            true,
								Description:         "SASL password",
								MarkdownDescription: "SASL password",
							},
							"tokenurl": schema.StringAttribute{
								Optional:            true,
								Description:         "token url for OAUTHBEARER SASL mechanism",
								MarkdownDescription: "token url for OAUTHBEARER SASL mechanism",
							},
							"user": schema.StringAttribute{
								Optional:            true,
								Description:         "SASL user name",
								MarkdownDescription: "SASL user name",
							},
						},
						CustomType: SaslType{
							ObjectType: types.ObjectType{
								AttrTypes: SaslValue{}.AttributeTypes(ctx),
							},
						},
						Optional:            true,
						Description:         "Kafka SASL configuration",
						MarkdownDescription: "Kafka SASL configuration",
					},
					"syncproducer": schema.BoolAttribute{
						Optional:            true,
						Description:         "Start a sync producer",
						MarkdownDescription: "Start a sync producer",
					},
					"timeout": schema.StringAttribute{
						Optional:            true,
						Description:         "Kafka producer timeout",
						MarkdownDescription: "Kafka producer timeout",
					},
					"tls": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"cafile": schema.StringAttribute{
								Optional:            true,
								Description:         "TLS Certificate Authority file path",
								MarkdownDescription: "TLS Certificate Authority file path",
							},
							"certfile": schema.StringAttribute{
								Optional:            true,
								Description:         "TLS Certificate file path",
								MarkdownDescription: "TLS Certificate file path",
							},
							"keyfile": schema.StringAttribute{
								Optional:            true,
								Description:         "TLS Key file path",
								MarkdownDescription: "TLS Key file path",
							},
							"skipverify": schema.BoolAttribute{
								Optional:            true,
								Description:         "Skip verifying the server certificate",
								MarkdownDescription: "Skip verifying the server certificate",
							},
						},
						CustomType: TlsType{
							ObjectType: types.ObjectType{
								AttrTypes: TlsValue{}.AttributeTypes(ctx),
							},
						},
						Optional:            true,
						Description:         "Kafka TLS configuration",
						MarkdownDescription: "Kafka TLS configuration",
					},
				},
				CustomType: SpecType{
					ObjectType: types.ObjectType{
						AttrTypes: SpecValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Description:         "ClusterProducerSpec defines the desired state of ClusterProducer",
				MarkdownDescription: "ClusterProducerSpec defines the desired state of ClusterProducer",
			},
			"status": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{},
				CustomType: StatusType{
					ObjectType: types.ObjectType{
						AttrTypes: StatusValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "ClusterProducerStatus defines the observed state of ClusterProducer",
				MarkdownDescription: "ClusterProducerStatus defines the observed state of ClusterProducer",
			},
		},
	}
}

type ClusterProducerModel struct {
	ApiVersion types.String  `tfsdk:"api_version"`
	Hash       types.String  `tfsdk:"hash"`
	Kind       types.String  `tfsdk:"kind"`
	Metadata   MetadataValue `tfsdk:"metadata"`
	Name       types.String  `tfsdk:"name"`
	Spec       SpecValue     `tfsdk:"spec"`
	Status     StatusValue   `tfsdk:"status"`
}

var _ basetypes.ObjectTypable = MetadataType{}

type MetadataType struct {
	basetypes.ObjectType
}

func (t MetadataType) Equal(o attr.Type) bool {
	other, ok := o.(MetadataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MetadataType) String() string {
	return "MetadataType"
}

func (t MetadataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	annotationsAttribute, ok := attributes["annotations"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`annotations is missing from object`)

		return nil, diags
	}

	annotationsVal, ok := annotationsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`annotations expected to be basetypes.MapValue, was: %T`, annotationsAttribute))
	}

	labelsAttribute, ok := attributes["labels"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`labels is missing from object`)

		return nil, diags
	}

	labelsVal, ok := labelsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`labels expected to be basetypes.MapValue, was: %T`, labelsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MetadataValue{
		Annotations: annotationsVal,
		Labels:      labelsVal,
		Name:        nameVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueNull() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateNull,
	}
}

func NewMetadataValueUnknown() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMetadataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MetadataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MetadataValue Attribute Value",
				"While creating a MetadataValue value, a missing attribute value was detected. "+
					"A MetadataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MetadataValue Attribute Type",
				"While creating a MetadataValue value, an invalid attribute value was detected. "+
					"A MetadataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MetadataValue Attribute Value",
				"While creating a MetadataValue value, an extra attribute value was detected. "+
					"A MetadataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MetadataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	annotationsAttribute, ok := attributes["annotations"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`annotations is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	annotationsVal, ok := annotationsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`annotations expected to be basetypes.MapValue, was: %T`, annotationsAttribute))
	}

	labelsAttribute, ok := attributes["labels"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`labels is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	labelsVal, ok := labelsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`labels expected to be basetypes.MapValue, was: %T`, labelsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	return MetadataValue{
		Annotations: annotationsVal,
		Labels:      labelsVal,
		Name:        nameVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MetadataValue {
	object, diags := NewMetadataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMetadataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MetadataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMetadataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMetadataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMetadataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMetadataValueMust(MetadataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MetadataType) ValueType(ctx context.Context) attr.Value {
	return MetadataValue{}
}

var _ basetypes.ObjectValuable = MetadataValue{}

type MetadataValue struct {
	Annotations basetypes.MapValue    `tfsdk:"annotations"`
	Labels      basetypes.MapValue    `tfsdk:"labels"`
	Name        basetypes.StringValue `tfsdk:"name"`
	state       attr.ValueState
}

func (v MetadataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["annotations"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["labels"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Annotations.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["annotations"] = val

		val, err = v.Labels.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["labels"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MetadataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MetadataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MetadataValue) String() string {
	return "MetadataValue"
}

func (v MetadataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var annotationsVal basetypes.MapValue
	switch {
	case v.Annotations.IsUnknown():
		annotationsVal = types.MapUnknown(types.StringType)
	case v.Annotations.IsNull():
		annotationsVal = types.MapNull(types.StringType)
	default:
		var d diag.Diagnostics
		annotationsVal, d = types.MapValue(types.StringType, v.Annotations.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"annotations": basetypes.MapType{
				ElemType: types.StringType,
			},
			"labels": basetypes.MapType{
				ElemType: types.StringType,
			},
			"name": basetypes.StringType{},
		}), diags
	}

	var labelsVal basetypes.MapValue
	switch {
	case v.Labels.IsUnknown():
		labelsVal = types.MapUnknown(types.StringType)
	case v.Labels.IsNull():
		labelsVal = types.MapNull(types.StringType)
	default:
		var d diag.Diagnostics
		labelsVal, d = types.MapValue(types.StringType, v.Labels.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"annotations": basetypes.MapType{
				ElemType: types.StringType,
			},
			"labels": basetypes.MapType{
				ElemType: types.StringType,
			},
			"name": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"annotations": basetypes.MapType{
			ElemType: types.StringType,
		},
		"labels": basetypes.MapType{
			ElemType: types.StringType,
		},
		"name": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"annotations": annotationsVal,
			"labels":      labelsVal,
			"name":        v.Name,
		})

	return objVal, diags
}

func (v MetadataValue) Equal(o attr.Value) bool {
	other, ok := o.(MetadataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Annotations.Equal(other.Annotations) {
		return false
	}

	if !v.Labels.Equal(other.Labels) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	return true
}

func (v MetadataValue) Type(ctx context.Context) attr.Type {
	return MetadataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MetadataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"annotations": basetypes.MapType{
			ElemType: types.StringType,
		},
		"labels": basetypes.MapType{
			ElemType: types.StringType,
		},
		"name": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SpecType{}

type SpecType struct {
	basetypes.ObjectType
}

func (t SpecType) Equal(o attr.Type) bool {
	other, ok := o.(SpecType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SpecType) String() string {
	return "SpecType"
}

func (t SpecType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	brokersAttribute, ok := attributes["brokers"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`brokers is missing from object`)

		return nil, diags
	}

	brokersVal, ok := brokersAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`brokers expected to be basetypes.StringValue, was: %T`, brokersAttribute))
	}

	compressioncodecAttribute, ok := attributes["compressioncodec"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`compressioncodec is missing from object`)

		return nil, diags
	}

	compressioncodecVal, ok := compressioncodecAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`compressioncodec expected to be basetypes.StringValue, was: %T`, compressioncodecAttribute))
	}

	exportsAttribute, ok := attributes["exports"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`exports is missing from object`)

		return nil, diags
	}

	exportsVal, ok := exportsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`exports expected to be basetypes.ListValue, was: %T`, exportsAttribute))
	}

	flushfrequencyAttribute, ok := attributes["flushfrequency"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`flushfrequency is missing from object`)

		return nil, diags
	}

	flushfrequencyVal, ok := flushfrequencyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`flushfrequency expected to be basetypes.StringValue, was: %T`, flushfrequencyAttribute))
	}

	maxretryAttribute, ok := attributes["maxretry"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`maxretry is missing from object`)

		return nil, diags
	}

	maxretryVal, ok := maxretryAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`maxretry expected to be basetypes.Int64Value, was: %T`, maxretryAttribute))
	}

	requiredacksAttribute, ok := attributes["requiredacks"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`requiredacks is missing from object`)

		return nil, diags
	}

	requiredacksVal, ok := requiredacksAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`requiredacks expected to be basetypes.StringValue, was: %T`, requiredacksAttribute))
	}

	saslAttribute, ok := attributes["sasl"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sasl is missing from object`)

		return nil, diags
	}

	saslVal, ok := saslAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sasl expected to be basetypes.ObjectValue, was: %T`, saslAttribute))
	}

	syncproducerAttribute, ok := attributes["syncproducer"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`syncproducer is missing from object`)

		return nil, diags
	}

	syncproducerVal, ok := syncproducerAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`syncproducer expected to be basetypes.BoolValue, was: %T`, syncproducerAttribute))
	}

	timeoutAttribute, ok := attributes["timeout"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`timeout is missing from object`)

		return nil, diags
	}

	timeoutVal, ok := timeoutAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`timeout expected to be basetypes.StringValue, was: %T`, timeoutAttribute))
	}

	tlsAttribute, ok := attributes["tls"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tls is missing from object`)

		return nil, diags
	}

	tlsVal, ok := tlsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tls expected to be basetypes.ObjectValue, was: %T`, tlsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SpecValue{
		Brokers:          brokersVal,
		Compressioncodec: compressioncodecVal,
		Exports:          exportsVal,
		Flushfrequency:   flushfrequencyVal,
		Maxretry:         maxretryVal,
		Requiredacks:     requiredacksVal,
		Sasl:             saslVal,
		Syncproducer:     syncproducerVal,
		Timeout:          timeoutVal,
		Tls:              tlsVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewSpecValueNull() SpecValue {
	return SpecValue{
		state: attr.ValueStateNull,
	}
}

func NewSpecValueUnknown() SpecValue {
	return SpecValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSpecValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SpecValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SpecValue Attribute Value",
				"While creating a SpecValue value, a missing attribute value was detected. "+
					"A SpecValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SpecValue Attribute Type",
				"While creating a SpecValue value, an invalid attribute value was detected. "+
					"A SpecValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SpecValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SpecValue Attribute Value",
				"While creating a SpecValue value, an extra attribute value was detected. "+
					"A SpecValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SpecValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	brokersAttribute, ok := attributes["brokers"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`brokers is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	brokersVal, ok := brokersAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`brokers expected to be basetypes.StringValue, was: %T`, brokersAttribute))
	}

	compressioncodecAttribute, ok := attributes["compressioncodec"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`compressioncodec is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	compressioncodecVal, ok := compressioncodecAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`compressioncodec expected to be basetypes.StringValue, was: %T`, compressioncodecAttribute))
	}

	exportsAttribute, ok := attributes["exports"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`exports is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	exportsVal, ok := exportsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`exports expected to be basetypes.ListValue, was: %T`, exportsAttribute))
	}

	flushfrequencyAttribute, ok := attributes["flushfrequency"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`flushfrequency is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	flushfrequencyVal, ok := flushfrequencyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`flushfrequency expected to be basetypes.StringValue, was: %T`, flushfrequencyAttribute))
	}

	maxretryAttribute, ok := attributes["maxretry"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`maxretry is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	maxretryVal, ok := maxretryAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`maxretry expected to be basetypes.Int64Value, was: %T`, maxretryAttribute))
	}

	requiredacksAttribute, ok := attributes["requiredacks"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`requiredacks is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	requiredacksVal, ok := requiredacksAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`requiredacks expected to be basetypes.StringValue, was: %T`, requiredacksAttribute))
	}

	saslAttribute, ok := attributes["sasl"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sasl is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	saslVal, ok := saslAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sasl expected to be basetypes.ObjectValue, was: %T`, saslAttribute))
	}

	syncproducerAttribute, ok := attributes["syncproducer"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`syncproducer is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	syncproducerVal, ok := syncproducerAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`syncproducer expected to be basetypes.BoolValue, was: %T`, syncproducerAttribute))
	}

	timeoutAttribute, ok := attributes["timeout"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`timeout is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	timeoutVal, ok := timeoutAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`timeout expected to be basetypes.StringValue, was: %T`, timeoutAttribute))
	}

	tlsAttribute, ok := attributes["tls"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tls is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	tlsVal, ok := tlsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tls expected to be basetypes.ObjectValue, was: %T`, tlsAttribute))
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	return SpecValue{
		Brokers:          brokersVal,
		Compressioncodec: compressioncodecVal,
		Exports:          exportsVal,
		Flushfrequency:   flushfrequencyVal,
		Maxretry:         maxretryVal,
		Requiredacks:     requiredacksVal,
		Sasl:             saslVal,
		Syncproducer:     syncproducerVal,
		Timeout:          timeoutVal,
		Tls:              tlsVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewSpecValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SpecValue {
	object, diags := NewSpecValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSpecValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SpecType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSpecValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSpecValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSpecValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSpecValueMust(SpecValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SpecType) ValueType(ctx context.Context) attr.Value {
	return SpecValue{}
}

var _ basetypes.ObjectValuable = SpecValue{}

type SpecValue struct {
	Brokers          basetypes.StringValue `tfsdk:"brokers"`
	Compressioncodec basetypes.StringValue `tfsdk:"compressioncodec"`
	Exports          basetypes.ListValue   `tfsdk:"exports"`
	Flushfrequency   basetypes.StringValue `tfsdk:"flushfrequency"`
	Maxretry         basetypes.Int64Value  `tfsdk:"maxretry"`
	Requiredacks     basetypes.StringValue `tfsdk:"requiredacks"`
	Sasl             basetypes.ObjectValue `tfsdk:"sasl"`
	Syncproducer     basetypes.BoolValue   `tfsdk:"syncproducer"`
	Timeout          basetypes.StringValue `tfsdk:"timeout"`
	Tls              basetypes.ObjectValue `tfsdk:"tls"`
	state            attr.ValueState
}

func (v SpecValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 10)

	var val tftypes.Value
	var err error

	attrTypes["brokers"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["compressioncodec"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["exports"] = basetypes.ListType{
		ElemType: ExportsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["flushfrequency"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["maxretry"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["requiredacks"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sasl"] = basetypes.ObjectType{
		AttrTypes: SaslValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["syncproducer"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["timeout"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tls"] = basetypes.ObjectType{
		AttrTypes: TlsValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 10)

		val, err = v.Brokers.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["brokers"] = val

		val, err = v.Compressioncodec.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["compressioncodec"] = val

		val, err = v.Exports.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["exports"] = val

		val, err = v.Flushfrequency.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["flushfrequency"] = val

		val, err = v.Maxretry.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["maxretry"] = val

		val, err = v.Requiredacks.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["requiredacks"] = val

		val, err = v.Sasl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sasl"] = val

		val, err = v.Syncproducer.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["syncproducer"] = val

		val, err = v.Timeout.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["timeout"] = val

		val, err = v.Tls.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tls"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SpecValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SpecValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SpecValue) String() string {
	return "SpecValue"
}

func (v SpecValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	exports := types.ListValueMust(
		ExportsType{
			basetypes.ObjectType{
				AttrTypes: ExportsValue{}.AttributeTypes(ctx),
			},
		},
		v.Exports.Elements(),
	)

	if v.Exports.IsNull() {
		exports = types.ListNull(
			ExportsType{
				basetypes.ObjectType{
					AttrTypes: ExportsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Exports.IsUnknown() {
		exports = types.ListUnknown(
			ExportsType{
				basetypes.ObjectType{
					AttrTypes: ExportsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	var sasl basetypes.ObjectValue

	if v.Sasl.IsNull() {
		sasl = types.ObjectNull(
			SaslValue{}.AttributeTypes(ctx),
		)
	}

	if v.Sasl.IsUnknown() {
		sasl = types.ObjectUnknown(
			SaslValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Sasl.IsNull() && !v.Sasl.IsUnknown() {
		sasl = types.ObjectValueMust(
			SaslValue{}.AttributeTypes(ctx),
			v.Sasl.Attributes(),
		)
	}

	var tls basetypes.ObjectValue

	if v.Tls.IsNull() {
		tls = types.ObjectNull(
			TlsValue{}.AttributeTypes(ctx),
		)
	}

	if v.Tls.IsUnknown() {
		tls = types.ObjectUnknown(
			TlsValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Tls.IsNull() && !v.Tls.IsUnknown() {
		tls = types.ObjectValueMust(
			TlsValue{}.AttributeTypes(ctx),
			v.Tls.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"brokers":          basetypes.StringType{},
		"compressioncodec": basetypes.StringType{},
		"exports": basetypes.ListType{
			ElemType: ExportsValue{}.Type(ctx),
		},
		"flushfrequency": basetypes.StringType{},
		"maxretry":       basetypes.Int64Type{},
		"requiredacks":   basetypes.StringType{},
		"sasl": basetypes.ObjectType{
			AttrTypes: SaslValue{}.AttributeTypes(ctx),
		},
		"syncproducer": basetypes.BoolType{},
		"timeout":      basetypes.StringType{},
		"tls": basetypes.ObjectType{
			AttrTypes: TlsValue{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"brokers":          v.Brokers,
			"compressioncodec": v.Compressioncodec,
			"exports":          exports,
			"flushfrequency":   v.Flushfrequency,
			"maxretry":         v.Maxretry,
			"requiredacks":     v.Requiredacks,
			"sasl":             sasl,
			"syncproducer":     v.Syncproducer,
			"timeout":          v.Timeout,
			"tls":              tls,
		})

	return objVal, diags
}

func (v SpecValue) Equal(o attr.Value) bool {
	other, ok := o.(SpecValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Brokers.Equal(other.Brokers) {
		return false
	}

	if !v.Compressioncodec.Equal(other.Compressioncodec) {
		return false
	}

	if !v.Exports.Equal(other.Exports) {
		return false
	}

	if !v.Flushfrequency.Equal(other.Flushfrequency) {
		return false
	}

	if !v.Maxretry.Equal(other.Maxretry) {
		return false
	}

	if !v.Requiredacks.Equal(other.Requiredacks) {
		return false
	}

	if !v.Sasl.Equal(other.Sasl) {
		return false
	}

	if !v.Syncproducer.Equal(other.Syncproducer) {
		return false
	}

	if !v.Timeout.Equal(other.Timeout) {
		return false
	}

	if !v.Tls.Equal(other.Tls) {
		return false
	}

	return true
}

func (v SpecValue) Type(ctx context.Context) attr.Type {
	return SpecType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SpecValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"brokers":          basetypes.StringType{},
		"compressioncodec": basetypes.StringType{},
		"exports": basetypes.ListType{
			ElemType: ExportsValue{}.Type(ctx),
		},
		"flushfrequency": basetypes.StringType{},
		"maxretry":       basetypes.Int64Type{},
		"requiredacks":   basetypes.StringType{},
		"sasl": basetypes.ObjectType{
			AttrTypes: SaslValue{}.AttributeTypes(ctx),
		},
		"syncproducer": basetypes.BoolType{},
		"timeout":      basetypes.StringType{},
		"tls": basetypes.ObjectType{
			AttrTypes: TlsValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = ExportsType{}

type ExportsType struct {
	basetypes.ObjectType
}

func (t ExportsType) Equal(o attr.Type) bool {
	other, ok := o.(ExportsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ExportsType) String() string {
	return "ExportsType"
}

func (t ExportsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	fieldsAttribute, ok := attributes["fields"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fields is missing from object`)

		return nil, diags
	}

	fieldsVal, ok := fieldsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fields expected to be basetypes.ListValue, was: %T`, fieldsAttribute))
	}

	modeAttribute, ok := attributes["mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mode is missing from object`)

		return nil, diags
	}

	modeVal, ok := modeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mode expected to be basetypes.StringValue, was: %T`, modeAttribute))
	}

	pathAttribute, ok := attributes["path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`path is missing from object`)

		return nil, diags
	}

	pathVal, ok := pathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`path expected to be basetypes.StringValue, was: %T`, pathAttribute))
	}

	periodAttribute, ok := attributes["period"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`period is missing from object`)

		return nil, diags
	}

	periodVal, ok := periodAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`period expected to be basetypes.StringValue, was: %T`, periodAttribute))
	}

	topicAttribute, ok := attributes["topic"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`topic is missing from object`)

		return nil, diags
	}

	topicVal, ok := topicAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`topic expected to be basetypes.StringValue, was: %T`, topicAttribute))
	}

	whereAttribute, ok := attributes["where"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`where is missing from object`)

		return nil, diags
	}

	whereVal, ok := whereAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`where expected to be basetypes.StringValue, was: %T`, whereAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ExportsValue{
		Fields: fieldsVal,
		Mode:   modeVal,
		Path:   pathVal,
		Period: periodVal,
		Topic:  topicVal,
		Where:  whereVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewExportsValueNull() ExportsValue {
	return ExportsValue{
		state: attr.ValueStateNull,
	}
}

func NewExportsValueUnknown() ExportsValue {
	return ExportsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewExportsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ExportsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ExportsValue Attribute Value",
				"While creating a ExportsValue value, a missing attribute value was detected. "+
					"A ExportsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ExportsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ExportsValue Attribute Type",
				"While creating a ExportsValue value, an invalid attribute value was detected. "+
					"A ExportsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ExportsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ExportsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ExportsValue Attribute Value",
				"While creating a ExportsValue value, an extra attribute value was detected. "+
					"A ExportsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ExportsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewExportsValueUnknown(), diags
	}

	fieldsAttribute, ok := attributes["fields"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fields is missing from object`)

		return NewExportsValueUnknown(), diags
	}

	fieldsVal, ok := fieldsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fields expected to be basetypes.ListValue, was: %T`, fieldsAttribute))
	}

	modeAttribute, ok := attributes["mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mode is missing from object`)

		return NewExportsValueUnknown(), diags
	}

	modeVal, ok := modeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mode expected to be basetypes.StringValue, was: %T`, modeAttribute))
	}

	pathAttribute, ok := attributes["path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`path is missing from object`)

		return NewExportsValueUnknown(), diags
	}

	pathVal, ok := pathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`path expected to be basetypes.StringValue, was: %T`, pathAttribute))
	}

	periodAttribute, ok := attributes["period"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`period is missing from object`)

		return NewExportsValueUnknown(), diags
	}

	periodVal, ok := periodAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`period expected to be basetypes.StringValue, was: %T`, periodAttribute))
	}

	topicAttribute, ok := attributes["topic"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`topic is missing from object`)

		return NewExportsValueUnknown(), diags
	}

	topicVal, ok := topicAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`topic expected to be basetypes.StringValue, was: %T`, topicAttribute))
	}

	whereAttribute, ok := attributes["where"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`where is missing from object`)

		return NewExportsValueUnknown(), diags
	}

	whereVal, ok := whereAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`where expected to be basetypes.StringValue, was: %T`, whereAttribute))
	}

	if diags.HasError() {
		return NewExportsValueUnknown(), diags
	}

	return ExportsValue{
		Fields: fieldsVal,
		Mode:   modeVal,
		Path:   pathVal,
		Period: periodVal,
		Topic:  topicVal,
		Where:  whereVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewExportsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ExportsValue {
	object, diags := NewExportsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewExportsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ExportsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewExportsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewExportsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewExportsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewExportsValueMust(ExportsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ExportsType) ValueType(ctx context.Context) attr.Value {
	return ExportsValue{}
}

var _ basetypes.ObjectValuable = ExportsValue{}

type ExportsValue struct {
	Fields basetypes.ListValue   `tfsdk:"fields"`
	Mode   basetypes.StringValue `tfsdk:"mode"`
	Path   basetypes.StringValue `tfsdk:"path"`
	Period basetypes.StringValue `tfsdk:"period"`
	Topic  basetypes.StringValue `tfsdk:"topic"`
	Where  basetypes.StringValue `tfsdk:"where"`
	state  attr.ValueState
}

func (v ExportsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["fields"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["mode"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["path"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["period"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["topic"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["where"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.Fields.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["fields"] = val

		val, err = v.Mode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mode"] = val

		val, err = v.Path.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["path"] = val

		val, err = v.Period.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["period"] = val

		val, err = v.Topic.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["topic"] = val

		val, err = v.Where.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["where"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ExportsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ExportsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ExportsValue) String() string {
	return "ExportsValue"
}

func (v ExportsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var fieldsVal basetypes.ListValue
	switch {
	case v.Fields.IsUnknown():
		fieldsVal = types.ListUnknown(types.StringType)
	case v.Fields.IsNull():
		fieldsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		fieldsVal, d = types.ListValue(types.StringType, v.Fields.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"fields": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mode":   basetypes.StringType{},
			"path":   basetypes.StringType{},
			"period": basetypes.StringType{},
			"topic":  basetypes.StringType{},
			"where":  basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"fields": basetypes.ListType{
			ElemType: types.StringType,
		},
		"mode":   basetypes.StringType{},
		"path":   basetypes.StringType{},
		"period": basetypes.StringType{},
		"topic":  basetypes.StringType{},
		"where":  basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"fields": fieldsVal,
			"mode":   v.Mode,
			"path":   v.Path,
			"period": v.Period,
			"topic":  v.Topic,
			"where":  v.Where,
		})

	return objVal, diags
}

func (v ExportsValue) Equal(o attr.Value) bool {
	other, ok := o.(ExportsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Fields.Equal(other.Fields) {
		return false
	}

	if !v.Mode.Equal(other.Mode) {
		return false
	}

	if !v.Path.Equal(other.Path) {
		return false
	}

	if !v.Period.Equal(other.Period) {
		return false
	}

	if !v.Topic.Equal(other.Topic) {
		return false
	}

	if !v.Where.Equal(other.Where) {
		return false
	}

	return true
}

func (v ExportsValue) Type(ctx context.Context) attr.Type {
	return ExportsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ExportsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"fields": basetypes.ListType{
			ElemType: types.StringType,
		},
		"mode":   basetypes.StringType{},
		"path":   basetypes.StringType{},
		"period": basetypes.StringType{},
		"topic":  basetypes.StringType{},
		"where":  basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SaslType{}

type SaslType struct {
	basetypes.ObjectType
}

func (t SaslType) Equal(o attr.Type) bool {
	other, ok := o.(SaslType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SaslType) String() string {
	return "SaslType"
}

func (t SaslType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	mechanismAttribute, ok := attributes["mechanism"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mechanism is missing from object`)

		return nil, diags
	}

	mechanismVal, ok := mechanismAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mechanism expected to be basetypes.StringValue, was: %T`, mechanismAttribute))
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return nil, diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	tokenurlAttribute, ok := attributes["tokenurl"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tokenurl is missing from object`)

		return nil, diags
	}

	tokenurlVal, ok := tokenurlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tokenurl expected to be basetypes.StringValue, was: %T`, tokenurlAttribute))
	}

	userAttribute, ok := attributes["user"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user is missing from object`)

		return nil, diags
	}

	userVal, ok := userAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user expected to be basetypes.StringValue, was: %T`, userAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SaslValue{
		Mechanism: mechanismVal,
		Password:  passwordVal,
		Tokenurl:  tokenurlVal,
		User:      userVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewSaslValueNull() SaslValue {
	return SaslValue{
		state: attr.ValueStateNull,
	}
}

func NewSaslValueUnknown() SaslValue {
	return SaslValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSaslValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SaslValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SaslValue Attribute Value",
				"While creating a SaslValue value, a missing attribute value was detected. "+
					"A SaslValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SaslValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SaslValue Attribute Type",
				"While creating a SaslValue value, an invalid attribute value was detected. "+
					"A SaslValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SaslValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SaslValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SaslValue Attribute Value",
				"While creating a SaslValue value, an extra attribute value was detected. "+
					"A SaslValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SaslValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSaslValueUnknown(), diags
	}

	mechanismAttribute, ok := attributes["mechanism"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mechanism is missing from object`)

		return NewSaslValueUnknown(), diags
	}

	mechanismVal, ok := mechanismAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mechanism expected to be basetypes.StringValue, was: %T`, mechanismAttribute))
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return NewSaslValueUnknown(), diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	tokenurlAttribute, ok := attributes["tokenurl"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tokenurl is missing from object`)

		return NewSaslValueUnknown(), diags
	}

	tokenurlVal, ok := tokenurlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tokenurl expected to be basetypes.StringValue, was: %T`, tokenurlAttribute))
	}

	userAttribute, ok := attributes["user"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user is missing from object`)

		return NewSaslValueUnknown(), diags
	}

	userVal, ok := userAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user expected to be basetypes.StringValue, was: %T`, userAttribute))
	}

	if diags.HasError() {
		return NewSaslValueUnknown(), diags
	}

	return SaslValue{
		Mechanism: mechanismVal,
		Password:  passwordVal,
		Tokenurl:  tokenurlVal,
		User:      userVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewSaslValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SaslValue {
	object, diags := NewSaslValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSaslValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SaslType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSaslValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSaslValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSaslValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSaslValueMust(SaslValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SaslType) ValueType(ctx context.Context) attr.Value {
	return SaslValue{}
}

var _ basetypes.ObjectValuable = SaslValue{}

type SaslValue struct {
	Mechanism basetypes.StringValue `tfsdk:"mechanism"`
	Password  basetypes.StringValue `tfsdk:"password"`
	Tokenurl  basetypes.StringValue `tfsdk:"tokenurl"`
	User      basetypes.StringValue `tfsdk:"user"`
	state     attr.ValueState
}

func (v SaslValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["mechanism"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["password"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tokenurl"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["user"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Mechanism.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mechanism"] = val

		val, err = v.Password.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["password"] = val

		val, err = v.Tokenurl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tokenurl"] = val

		val, err = v.User.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["user"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SaslValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SaslValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SaslValue) String() string {
	return "SaslValue"
}

func (v SaslValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"mechanism": basetypes.StringType{},
		"password":  basetypes.StringType{},
		"tokenurl":  basetypes.StringType{},
		"user":      basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"mechanism": v.Mechanism,
			"password":  v.Password,
			"tokenurl":  v.Tokenurl,
			"user":      v.User,
		})

	return objVal, diags
}

func (v SaslValue) Equal(o attr.Value) bool {
	other, ok := o.(SaslValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Mechanism.Equal(other.Mechanism) {
		return false
	}

	if !v.Password.Equal(other.Password) {
		return false
	}

	if !v.Tokenurl.Equal(other.Tokenurl) {
		return false
	}

	if !v.User.Equal(other.User) {
		return false
	}

	return true
}

func (v SaslValue) Type(ctx context.Context) attr.Type {
	return SaslType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SaslValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"mechanism": basetypes.StringType{},
		"password":  basetypes.StringType{},
		"tokenurl":  basetypes.StringType{},
		"user":      basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = TlsType{}

type TlsType struct {
	basetypes.ObjectType
}

func (t TlsType) Equal(o attr.Type) bool {
	other, ok := o.(TlsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TlsType) String() string {
	return "TlsType"
}

func (t TlsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	cafileAttribute, ok := attributes["cafile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cafile is missing from object`)

		return nil, diags
	}

	cafileVal, ok := cafileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cafile expected to be basetypes.StringValue, was: %T`, cafileAttribute))
	}

	certfileAttribute, ok := attributes["certfile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`certfile is missing from object`)

		return nil, diags
	}

	certfileVal, ok := certfileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`certfile expected to be basetypes.StringValue, was: %T`, certfileAttribute))
	}

	keyfileAttribute, ok := attributes["keyfile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`keyfile is missing from object`)

		return nil, diags
	}

	keyfileVal, ok := keyfileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`keyfile expected to be basetypes.StringValue, was: %T`, keyfileAttribute))
	}

	skipverifyAttribute, ok := attributes["skipverify"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`skipverify is missing from object`)

		return nil, diags
	}

	skipverifyVal, ok := skipverifyAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`skipverify expected to be basetypes.BoolValue, was: %T`, skipverifyAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TlsValue{
		Cafile:     cafileVal,
		Certfile:   certfileVal,
		Keyfile:    keyfileVal,
		Skipverify: skipverifyVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewTlsValueNull() TlsValue {
	return TlsValue{
		state: attr.ValueStateNull,
	}
}

func NewTlsValueUnknown() TlsValue {
	return TlsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTlsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TlsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TlsValue Attribute Value",
				"While creating a TlsValue value, a missing attribute value was detected. "+
					"A TlsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TlsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TlsValue Attribute Type",
				"While creating a TlsValue value, an invalid attribute value was detected. "+
					"A TlsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TlsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TlsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TlsValue Attribute Value",
				"While creating a TlsValue value, an extra attribute value was detected. "+
					"A TlsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TlsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTlsValueUnknown(), diags
	}

	cafileAttribute, ok := attributes["cafile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cafile is missing from object`)

		return NewTlsValueUnknown(), diags
	}

	cafileVal, ok := cafileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cafile expected to be basetypes.StringValue, was: %T`, cafileAttribute))
	}

	certfileAttribute, ok := attributes["certfile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`certfile is missing from object`)

		return NewTlsValueUnknown(), diags
	}

	certfileVal, ok := certfileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`certfile expected to be basetypes.StringValue, was: %T`, certfileAttribute))
	}

	keyfileAttribute, ok := attributes["keyfile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`keyfile is missing from object`)

		return NewTlsValueUnknown(), diags
	}

	keyfileVal, ok := keyfileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`keyfile expected to be basetypes.StringValue, was: %T`, keyfileAttribute))
	}

	skipverifyAttribute, ok := attributes["skipverify"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`skipverify is missing from object`)

		return NewTlsValueUnknown(), diags
	}

	skipverifyVal, ok := skipverifyAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`skipverify expected to be basetypes.BoolValue, was: %T`, skipverifyAttribute))
	}

	if diags.HasError() {
		return NewTlsValueUnknown(), diags
	}

	return TlsValue{
		Cafile:     cafileVal,
		Certfile:   certfileVal,
		Keyfile:    keyfileVal,
		Skipverify: skipverifyVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewTlsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TlsValue {
	object, diags := NewTlsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTlsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TlsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTlsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTlsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTlsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTlsValueMust(TlsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TlsType) ValueType(ctx context.Context) attr.Value {
	return TlsValue{}
}

var _ basetypes.ObjectValuable = TlsValue{}

type TlsValue struct {
	Cafile     basetypes.StringValue `tfsdk:"cafile"`
	Certfile   basetypes.StringValue `tfsdk:"certfile"`
	Keyfile    basetypes.StringValue `tfsdk:"keyfile"`
	Skipverify basetypes.BoolValue   `tfsdk:"skipverify"`
	state      attr.ValueState
}

func (v TlsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["cafile"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["certfile"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["keyfile"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["skipverify"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Cafile.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cafile"] = val

		val, err = v.Certfile.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["certfile"] = val

		val, err = v.Keyfile.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["keyfile"] = val

		val, err = v.Skipverify.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["skipverify"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TlsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TlsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TlsValue) String() string {
	return "TlsValue"
}

func (v TlsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"cafile":     basetypes.StringType{},
		"certfile":   basetypes.StringType{},
		"keyfile":    basetypes.StringType{},
		"skipverify": basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"cafile":     v.Cafile,
			"certfile":   v.Certfile,
			"keyfile":    v.Keyfile,
			"skipverify": v.Skipverify,
		})

	return objVal, diags
}

func (v TlsValue) Equal(o attr.Value) bool {
	other, ok := o.(TlsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Cafile.Equal(other.Cafile) {
		return false
	}

	if !v.Certfile.Equal(other.Certfile) {
		return false
	}

	if !v.Keyfile.Equal(other.Keyfile) {
		return false
	}

	if !v.Skipverify.Equal(other.Skipverify) {
		return false
	}

	return true
}

func (v TlsValue) Type(ctx context.Context) attr.Type {
	return TlsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TlsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"cafile":     basetypes.StringType{},
		"certfile":   basetypes.StringType{},
		"keyfile":    basetypes.StringType{},
		"skipverify": basetypes.BoolType{},
	}
}

var _ basetypes.ObjectTypable = StatusType{}

type StatusType struct {
	basetypes.ObjectType
}

func (t StatusType) Equal(o attr.Type) bool {
	other, ok := o.(StatusType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t StatusType) String() string {
	return "StatusType"
}

func (t StatusType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return StatusValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewStatusValueNull() StatusValue {
	return StatusValue{
		state: attr.ValueStateNull,
	}
}

func NewStatusValueUnknown() StatusValue {
	return StatusValue{
		state: attr.ValueStateUnknown,
	}
}

func NewStatusValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (StatusValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing StatusValue Attribute Value",
				"While creating a StatusValue value, a missing attribute value was detected. "+
					"A StatusValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StatusValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid StatusValue Attribute Type",
				"While creating a StatusValue value, an invalid attribute value was detected. "+
					"A StatusValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StatusValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("StatusValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra StatusValue Attribute Value",
				"While creating a StatusValue value, an extra attribute value was detected. "+
					"A StatusValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra StatusValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewStatusValueUnknown(), diags
	}

	if diags.HasError() {
		return NewStatusValueUnknown(), diags
	}

	return StatusValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewStatusValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) StatusValue {
	object, diags := NewStatusValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewStatusValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t StatusType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewStatusValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewStatusValueUnknown(), nil
	}

	if in.IsNull() {
		return NewStatusValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewStatusValueMust(StatusValue{}.AttributeTypes(ctx), attributes), nil
}

func (t StatusType) ValueType(ctx context.Context) attr.Value {
	return StatusValue{}
}

var _ basetypes.ObjectValuable = StatusValue{}

type StatusValue struct {
	state attr.ValueState
}

func (v StatusValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v StatusValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v StatusValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v StatusValue) String() string {
	return "StatusValue"
}

func (v StatusValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{})

	return objVal, diags
}

func (v StatusValue) Equal(o attr.Value) bool {
	other, ok := o.(StatusValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v StatusValue) Type(ctx context.Context) attr.Type {
	return StatusType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v StatusValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}
