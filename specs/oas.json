{
  "components": {
    "schemas": {
      "AppGroup": {
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "preferredVersion": {
            "$ref": "#/components/schemas/AppGroupVersion"
          },
          "versions": {
            "items": {
              "$ref": "#/components/schemas/AppGroupVersion"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AppGroupVersion": {
        "properties": {
          "groupVersion": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorIndex": {
        "properties": {
          "index": {
            "format": "int64",
            "type": "integer"
          }
        },
        "title": "Wrapper for index information inside an error.",
        "type": "object"
      },
      "ErrorItem": {
        "properties": {
          "error": {
            "type": "object"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorResponse": {
        "description": "Generic error response for REST APIs",
        "properties": {
          "code": {
            "description": "the numeric HTTP error code for the response.",
            "format": "int64",
            "type": "integer"
          },
          "details": {
            "description": "The optional details of the error response.",
            "type": "string"
          },
          "dictionary": {
            "additionalProperties": true,
            "description": "Dictionary/map of associated data/information relevant to the error.\nThe error \"message\" may contain {{name}} escapes that should be substituted\nwith information from this dictionary.",
            "type": "object"
          },
          "domain": {
            "description": "The \"domain\" for the error.  If empty, it is an EDA\ncore error.  Alternatively it can be an EDA application\n\"apiVersion\" value (e.g. interfaces.eda.nokia.com/v1alpha1)\nindicating that the error is specific to that application.\nThe domain gives the receiver information that they can use\nto help them interpret the \"internal\" error code value, or\nto find an internationalization translation for the message.",
            "type": "string"
          },
          "errors": {
            "description": "Collection of errors in cases where more than one exists. This needs to be\nflexible so we can support multiple formats",
            "items": {
              "$ref": "#/components/schemas/ErrorItem"
            },
            "type": "array"
          },
          "index": {
            "$ref": "#/components/schemas/ErrorIndex"
          },
          "internal": {
            "description": "Internal error code in cases where we don't have an array of errors",
            "format": "int64",
            "type": "integer"
          },
          "message": {
            "description": "The basic text error message for the error response.",
            "type": "string"
          },
          "ref": {
            "description": "Reference to the error source. Should typically be the URI of the request",
            "type": "string"
          },
          "type": {
            "description": "URI pointing at a document that describes the error and mitigation steps\nIf there is no document, point to the RFC for the HTTP error code",
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object"
      },
      "K8SPatchOp": {
        "properties": {
          "from": {
            "type": "string"
          },
          "op": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "value": {
            "type": "object"
          },
          "x-permissive": {
            "type": "boolean"
          }
        },
        "required": [
          "op",
          "path"
        ],
        "type": "object"
      },
      "OverlayState": {
        "properties": {
          "links": {
            "additionalProperties": {
              "$ref": "#/components/schemas/TopoOverlayLink"
            },
            "type": "object"
          },
          "nodes": {
            "additionalProperties": {
              "$ref": "#/components/schemas/TopoOverlayNode"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Patch": {
        "items": {
          "$ref": "#/components/schemas/K8SPatchOp"
        },
        "type": "array"
      },
      "Resource": {
        "properties": {
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namespaced": {
            "type": "boolean"
          },
          "readOnly": {
            "type": "boolean"
          },
          "singularName": {
            "type": "string"
          },
          "uiCategory": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceHistory": {
        "items": {
          "$ref": "#/components/schemas/ResourceHistoryEntry"
        },
        "type": "array"
      },
      "ResourceHistoryEntry": {
        "properties": {
          "author": {
            "type": "string"
          },
          "changeType": {
            "type": "string"
          },
          "commitTime": {
            "format": "date-time",
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "transactionId": {
            "format": "uint64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ResourceList": {
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "groupVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/Resource"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ResourceTopology": {
        "properties": {
          "topology": {
            "$ref": "#/components/schemas/OverlayState"
          },
          "topologyMetadata": {
            "$ref": "#/components/schemas/Topology"
          }
        },
        "type": "object"
      },
      "Status": {
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "details": {
            "$ref": "#/components/schemas/StatusDetails"
          },
          "kind": {
            "type": "string"
          },
          "string": {
            "type": "string"
          }
        },
        "title": "Status is a return value for calls that don't return other objects.",
        "type": "object"
      },
      "StatusDetails": {
        "properties": {
          "group": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TopoAttrMetadata": {
        "properties": {
          "type": {
            "type": "string"
          },
          "ui_description": {
            "type": "string"
          },
          "ui_description_key": {
            "type": "string"
          },
          "ui_name": {
            "type": "string"
          },
          "ui_name_key": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TopoElemMetadata": {
        "properties": {
          "attributes": {
            "additionalProperties": {
              "$ref": "#/components/schemas/TopoAttrMetadata"
            },
            "type": "object"
          },
          "schema": {
            "$ref": "#/components/schemas/TopoSchema"
          },
          "subtitle": {
            "type": "string"
          },
          "subtitle_key": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TopoLinkEndpoint": {
        "properties": {
          "endpoint": {
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "node_key": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TopoNodeGrouping": {
        "properties": {
          "group": {
            "type": "string"
          },
          "tier": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TopoOverlayEndpoint": {
        "properties": {
          "attributes": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "cr_name": {
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "overlays": {
            "additionalProperties": {
              "$ref": "#/components/schemas/TopoOverlayEndpointState"
            },
            "type": "object"
          },
          "schema": {
            "$ref": "#/components/schemas/TopoSchema"
          },
          "state": {
            "format": "int64",
            "type": "integer"
          },
          "ui_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TopoOverlayEndpointState": {
        "properties": {
          "state": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TopoOverlayLink": {
        "properties": {
          "attributes": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "cr_name": {
            "type": "string"
          },
          "endpoint_a": {
            "$ref": "#/components/schemas/TopoLinkEndpoint"
          },
          "endpoint_a_details": {
            "$ref": "#/components/schemas/TopoOverlayEndpoint"
          },
          "endpoint_b": {
            "$ref": "#/components/schemas/TopoLinkEndpoint"
          },
          "endpoint_b_details": {
            "$ref": "#/components/schemas/TopoOverlayEndpoint"
          },
          "key": {
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "overlays": {
            "additionalProperties": {
              "$ref": "#/components/schemas/TopoOverlayLinkState"
            },
            "type": "object"
          },
          "schema": {
            "$ref": "#/components/schemas/TopoSchema"
          },
          "state": {
            "format": "int64",
            "type": "integer"
          },
          "ui_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TopoOverlayLinkState": {
        "properties": {
          "state": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TopoOverlayNode": {
        "properties": {
          "attributes": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "badges": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "cr_name": {
            "type": "string"
          },
          "grouping": {
            "$ref": "#/components/schemas/TopoNodeGrouping"
          },
          "key": {
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "overlays": {
            "additionalProperties": {
              "$ref": "#/components/schemas/TopoOverlayNodeState"
            },
            "type": "object"
          },
          "schema": {
            "$ref": "#/components/schemas/TopoSchema"
          },
          "state": {
            "format": "int64",
            "type": "integer"
          },
          "ui_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TopoOverlayNodeState": {
        "properties": {
          "badges": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "state": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TopoSchema": {
        "properties": {
          "group": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Topology": {
        "properties": {
          "endpoints": {
            "$ref": "#/components/schemas/TopoElemMetadata"
          },
          "group": {
            "type": "string"
          },
          "grouping": {
            "$ref": "#/components/schemas/TopoSchema"
          },
          "links": {
            "$ref": "#/components/schemas/TopoElemMetadata"
          },
          "name": {
            "type": "string"
          },
          "nodes": {
            "$ref": "#/components/schemas/TopoElemMetadata"
          },
          "ui_description": {
            "type": "string"
          },
          "ui_description_key": {
            "type": "string"
          },
          "ui_name": {
            "type": "string"
          },
          "ui_name_key": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UIResult": {
        "type": "string"
      },
      "com.nokia.eda.kafka.v1alpha1.ClusterProducer": {
        "description": "ClusterProducer is the Schema for the clusterproducers API",
        "properties": {
          "apiVersion": {
            "default": "kafka.eda.nokia.com/v1alpha1",
            "pattern": "^kafka\\.eda\\.nokia\\.com/v1alpha1$",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-pattern-error": "The apiVersion must be set to kafka.eda.nokia.com/v1alpha1",
              "ui-visible-if": "false"
            }
          },
          "kind": {
            "default": "ClusterProducer",
            "pattern": "^ClusterProducer$",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-pattern-error": "The kind must be set to ClusterProducer",
              "ui-visible-if": "false"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.ClusterProducer_metadata"
          },
          "spec": {
            "description": "ClusterProducerSpec defines the desired state of ClusterProducer",
            "properties": {
              "brokers": {
                "description": "Comma separated Kafka brokers list",
                "title": "Brokers",
                "type": "string",
                "x-eda-nokia-com": {
                  "ui-order-priority": 100
                }
              },
              "compression-codec": {
                "default": "none",
                "description": "Data compression codec",
                "enum": [
                  "none",
                  "gzip",
                  "snappy",
                  "zstd",
                  "lz4"
                ],
                "title": "Compression Codec",
                "type": "string",
                "x-eda-nokia-com": {
                  "ui-order-priority": 900
                }
              },
              "exports": {
                "description": "Exports is the list of paths to be exported as well as the topic and mode for each.",
                "items": {
                  "description": "Export defines an object to be exported and",
                  "properties": {
                    "fields": {
                      "description": "list of fields to be exported from the configured EDB table.",
                      "items": {
                        "type": "string"
                      },
                      "title": "Fields",
                      "type": "array",
                      "x-eda-nokia-com": {
                        "ui-order-priority": 1300
                      }
                    },
                    "mode": {
                      "default": "on-change",
                      "description": "Export Mode",
                      "enum": [
                        "on-change",
                        "periodic",
                        "periodic-on-change"
                      ],
                      "title": "Mode",
                      "type": "string",
                      "x-eda-nokia-com": {
                        "ui-order-priority": 1600
                      }
                    },
                    "path": {
                      "description": "The EDB path to export, in the format '.namespace.node.srl.interface'",
                      "title": "Path",
                      "type": "string",
                      "x-eda-nokia-com": {
                        "ui-order-priority": 1200
                      }
                    },
                    "period": {
                      "default": "10s",
                      "description": "Export Period. A 1s minimum is enforced.",
                      "title": "Period",
                      "type": "string",
                      "x-eda-nokia-com": {
                        "ui-order-priority": 1500
                      }
                    },
                    "topic": {
                      "description": "A topic name to which the producer must write\nupdates from this export path",
                      "title": "Topic",
                      "type": "string",
                      "x-eda-nokia-com": {
                        "ui-order-priority": 1100
                      }
                    },
                    "where": {
                      "description": "A where clause to use for the query, e.g. 'oper-state = down'. You can omit enclosing parentheses.",
                      "title": "Where",
                      "type": "string",
                      "x-eda-nokia-com": {
                        "ui-order-priority": 1400
                      }
                    }
                  },
                  "required": [
                    "path",
                    "topic"
                  ],
                  "type": "object"
                },
                "title": "Exports",
                "type": "array",
                "x-eda-nokia-com": {
                  "ui-order-priority": 1000
                }
              },
              "flush-frequency": {
                "description": "The best-effort frequency of flushes",
                "title": "Flush Frequency",
                "type": "string",
                "x-eda-nokia-com": {
                  "ui-order-priority": 800
                }
              },
              "max-retry": {
                "default": 3,
                "description": "The total number of times to retry sending a message",
                "title": "Max Retry",
                "type": "integer",
                "x-eda-nokia-com": {
                  "ui-order-priority": 600
                }
              },
              "required-acks": {
                "default": "no-response",
                "description": "Number of replica acknowledgements the broker must see before responding",
                "enum": [
                  "no-response",
                  "wait-for-local",
                  "wait-for-all"
                ],
                "title": "Required Acks",
                "type": "string",
                "x-eda-nokia-com": {
                  "ui-order-priority": 300
                }
              },
              "sasl": {
                "description": "Kafka SASL configuration",
                "properties": {
                  "mechanism": {
                    "default": "plain",
                    "description": "SASL Mechanism",
                    "enum": [
                      "plain",
                      "scram-sha-256",
                      "scram-sha-512",
                      "oauthbearer"
                    ],
                    "title": "Mechanism",
                    "type": "string"
                  },
                  "password": {
                    "description": "SASL password",
                    "title": "Password",
                    "type": "string"
                  },
                  "token-url": {
                    "description": "token url for OAUTHBEARER SASL mechanism",
                    "title": "TokenURL",
                    "type": "string"
                  },
                  "user": {
                    "description": "SASL user name",
                    "title": "User",
                    "type": "string"
                  }
                },
                "title": "SASL",
                "type": "object",
                "x-eda-nokia-com": {
                  "ui-order-priority": 400
                }
              },
              "sync-producer": {
                "description": "Start a sync producer",
                "title": "Sync Producer",
                "type": "boolean",
                "x-eda-nokia-com": {
                  "ui-order-priority": 200
                }
              },
              "timeout": {
                "default": "10s",
                "description": "Kafka producer timeout",
                "title": "Timeout",
                "type": "string",
                "x-eda-nokia-com": {
                  "ui-order-priority": 700
                }
              },
              "tls": {
                "description": "Kafka TLS configuration",
                "properties": {
                  "ca-file": {
                    "description": "TLS Certificate Authority file path",
                    "title": "CA",
                    "type": "string"
                  },
                  "cert-file": {
                    "description": "TLS Certificate file path",
                    "title": "Certificate",
                    "type": "string"
                  },
                  "key-file": {
                    "description": "TLS Key file path",
                    "title": "Key",
                    "type": "string"
                  },
                  "skip-verify": {
                    "description": "Skip verifying the server certificate",
                    "title": "Skip Verify",
                    "type": "boolean"
                  }
                },
                "title": "TLS",
                "type": "object",
                "x-eda-nokia-com": {
                  "ui-order-priority": 500
                }
              }
            },
            "required": [
              "brokers",
              "exports"
            ],
            "title": "Specification",
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 30
            }
          },
          "status": {
            "description": "ClusterProducerStatus defines the observed state of ClusterProducer",
            "readOnly": true,
            "title": "Status",
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 20
            }
          }
        },
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object"
      },
      "com.nokia.eda.kafka.v1alpha1.ClusterProducerList": {
        "description": "ClusterProducerList is a list of clusterproducers",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.ClusterProducer"
            },
            "type": "array"
          },
          "kind": {
            "type": "string"
          }
        },
        "required": [
          "apiVersion",
          "kind"
        ],
        "type": "object"
      },
      "com.nokia.eda.kafka.v1alpha1.ClusterProducer_DeletedResourceEntry": {
        "properties": {
          "commitTime": {
            "format": "date-time",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 50,
              "ui-title": "Commit Time",
              "ui-title-key": "commitTime"
            }
          },
          "hash": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 40,
              "ui-title": "Commit Hash",
              "ui-title-key": "commitHash"
            }
          },
          "name": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 10,
              "ui-title": "Name",
              "ui-title-key": "name"
            }
          },
          "transactionId": {
            "format": "uint64",
            "type": "integer",
            "x-eda-nokia-com": {
              "ui-order-priority": 30,
              "ui-title": "Transaction ID",
              "ui-title-key": "transactionId"
            }
          }
        },
        "type": "object"
      },
      "com.nokia.eda.kafka.v1alpha1.ClusterProducer_DeletedResources": {
        "items": {
          "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.ClusterProducer_DeletedResourceEntry"
        },
        "type": "array"
      },
      "com.nokia.eda.kafka.v1alpha1.ClusterProducer_metadata": {
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 40,
              "ui-title": "Annotations",
              "ui-title-key": "annotations"
            }
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "x-eda-nokia-com": {
              "ui-auto-completes": [
                {
                  "condition": "true",
                  "group": "kafka.eda.nokia.com",
                  "kind": "ClusterProducer",
                  "type": "label",
                  "version": "v1alpha1"
                }
              ],
              "ui-order-priority": 30,
              "ui-title": "Labels",
              "ui-title-key": "labels"
            }
          },
          "name": {
            "maxLength": 253,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
            "type": "string",
            "x-eda-nokia-com": {
              "immutable": true,
              "ui-order-priority": 10,
              "ui-pattern-error": "A valid name is made up of one or more components where each component is separated by period characters.  Each component must start and end with a lower case alphanumeric character and the body of the component is made up of zero or more lower case alphanumeric and hyphen characters.",
              "ui-title": "Name",
              "ui-title-key": "name"
            }
          }
        },
        "required": [
          "name"
        ],
        "type": "object",
        "x-eda-nokia-com": {
          "ui-order-priority": 10,
          "ui-title": "Metadata",
          "ui-title-key": "metadata"
        }
      },
      "com.nokia.eda.kafka.v1alpha1.Producer": {
        "description": "Producer is the Schema for the producers API",
        "properties": {
          "apiVersion": {
            "default": "kafka.eda.nokia.com/v1alpha1",
            "pattern": "^kafka\\.eda\\.nokia\\.com/v1alpha1$",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-pattern-error": "The apiVersion must be set to kafka.eda.nokia.com/v1alpha1",
              "ui-visible-if": "false"
            }
          },
          "kind": {
            "default": "Producer",
            "pattern": "^Producer$",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-pattern-error": "The kind must be set to Producer",
              "ui-visible-if": "false"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.Producer_metadata"
          },
          "spec": {
            "description": "ProducerSpec defines the desired state of Producer",
            "properties": {
              "brokers": {
                "description": "Comma separated Kafka brokers list",
                "title": "Brokers",
                "type": "string",
                "x-eda-nokia-com": {
                  "ui-order-priority": 100
                }
              },
              "compression-codec": {
                "default": "none",
                "description": "Data compression codec",
                "enum": [
                  "none",
                  "gzip",
                  "snappy",
                  "zstd",
                  "lz4"
                ],
                "title": "Compression Codec",
                "type": "string",
                "x-eda-nokia-com": {
                  "ui-order-priority": 900
                }
              },
              "exports": {
                "description": "Exports is the list of paths to be exported as well as the topic and mode for each.",
                "items": {
                  "description": "Export defines an object to be exported and",
                  "properties": {
                    "fields": {
                      "description": "list of fields to be exported from the configured EDB table.",
                      "items": {
                        "type": "string"
                      },
                      "title": "Fields",
                      "type": "array",
                      "x-eda-nokia-com": {
                        "ui-order-priority": 1300
                      }
                    },
                    "mode": {
                      "default": "on-change",
                      "description": "Export Mode",
                      "enum": [
                        "on-change",
                        "periodic",
                        "periodic-on-change"
                      ],
                      "title": "Mode",
                      "type": "string",
                      "x-eda-nokia-com": {
                        "ui-order-priority": 1600
                      }
                    },
                    "path": {
                      "description": "The EDB path to export, in the format '.namespace.node.srl.interface'",
                      "title": "Path",
                      "type": "string",
                      "x-eda-nokia-com": {
                        "ui-order-priority": 1200
                      }
                    },
                    "period": {
                      "default": "10s",
                      "description": "Export Period. A 1s minimum is enforced.",
                      "title": "Period",
                      "type": "string",
                      "x-eda-nokia-com": {
                        "ui-order-priority": 1500
                      }
                    },
                    "topic": {
                      "description": "A topic name to which the producer must write\nupdates from this export path",
                      "title": "Topic",
                      "type": "string",
                      "x-eda-nokia-com": {
                        "ui-order-priority": 1100
                      }
                    },
                    "where": {
                      "description": "A where clause to use for the query, e.g. 'oper-state = down'. You can omit enclosing parentheses.",
                      "title": "Where",
                      "type": "string",
                      "x-eda-nokia-com": {
                        "ui-order-priority": 1400
                      }
                    }
                  },
                  "required": [
                    "path",
                    "topic"
                  ],
                  "type": "object"
                },
                "title": "Exports",
                "type": "array",
                "x-eda-nokia-com": {
                  "ui-order-priority": 1000
                }
              },
              "flush-frequency": {
                "description": "The best-effort frequency of flushes",
                "title": "Flush Frequency",
                "type": "string",
                "x-eda-nokia-com": {
                  "ui-order-priority": 800
                }
              },
              "max-retry": {
                "default": 3,
                "description": "The total number of times to retry sending a message",
                "title": "Max Retry",
                "type": "integer",
                "x-eda-nokia-com": {
                  "ui-order-priority": 600
                }
              },
              "required-acks": {
                "default": "no-response",
                "description": "Number of replica acknowledgements the broker must see before responding",
                "enum": [
                  "no-response",
                  "wait-for-local",
                  "wait-for-all"
                ],
                "title": "Required Acks",
                "type": "string",
                "x-eda-nokia-com": {
                  "ui-order-priority": 300
                }
              },
              "sasl": {
                "description": "Kafka SASL configuration",
                "properties": {
                  "mechanism": {
                    "default": "plain",
                    "description": "SASL Mechanism",
                    "enum": [
                      "plain",
                      "scram-sha-256",
                      "scram-sha-512",
                      "oauthbearer"
                    ],
                    "title": "Mechanism",
                    "type": "string"
                  },
                  "password": {
                    "description": "SASL password",
                    "title": "Password",
                    "type": "string"
                  },
                  "token-url": {
                    "description": "token url for OAUTHBEARER SASL mechanism",
                    "title": "TokenURL",
                    "type": "string"
                  },
                  "user": {
                    "description": "SASL user name",
                    "title": "User",
                    "type": "string"
                  }
                },
                "title": "SASL",
                "type": "object",
                "x-eda-nokia-com": {
                  "ui-order-priority": 400
                }
              },
              "sync-producer": {
                "description": "Start a sync producer",
                "title": "Sync Producer",
                "type": "boolean",
                "x-eda-nokia-com": {
                  "ui-order-priority": 200
                }
              },
              "timeout": {
                "default": "10s",
                "description": "Kafka producer timeout",
                "title": "Timeout",
                "type": "string",
                "x-eda-nokia-com": {
                  "ui-order-priority": 700
                }
              },
              "tls": {
                "description": "Kafka TLS configuration",
                "properties": {
                  "ca-file": {
                    "description": "TLS Certificate Authority file path",
                    "title": "CA",
                    "type": "string"
                  },
                  "cert-file": {
                    "description": "TLS Certificate file path",
                    "title": "Certificate",
                    "type": "string"
                  },
                  "key-file": {
                    "description": "TLS Key file path",
                    "title": "Key",
                    "type": "string"
                  },
                  "skip-verify": {
                    "description": "Skip verifying the server certificate",
                    "title": "Skip Verify",
                    "type": "boolean"
                  }
                },
                "title": "TLS",
                "type": "object",
                "x-eda-nokia-com": {
                  "ui-order-priority": 500
                }
              }
            },
            "required": [
              "brokers",
              "exports"
            ],
            "title": "Specification",
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 30
            }
          },
          "status": {
            "description": "ProducerStatus defines the observed state of Producer",
            "readOnly": true,
            "title": "Status",
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 20
            }
          }
        },
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object"
      },
      "com.nokia.eda.kafka.v1alpha1.ProducerList": {
        "description": "ProducerList is a list of producers",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.Producer"
            },
            "type": "array"
          },
          "kind": {
            "type": "string"
          }
        },
        "required": [
          "apiVersion",
          "kind"
        ],
        "type": "object"
      },
      "com.nokia.eda.kafka.v1alpha1.Producer_DeletedResourceEntry": {
        "properties": {
          "commitTime": {
            "format": "date-time",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 50,
              "ui-title": "Commit Time",
              "ui-title-key": "commitTime"
            }
          },
          "hash": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 40,
              "ui-title": "Commit Hash",
              "ui-title-key": "commitHash"
            }
          },
          "name": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 10,
              "ui-title": "Name",
              "ui-title-key": "name"
            }
          },
          "namespace": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 20,
              "ui-title": "Namespace",
              "ui-title-key": "namespace"
            }
          },
          "transactionId": {
            "format": "uint64",
            "type": "integer",
            "x-eda-nokia-com": {
              "ui-order-priority": 30,
              "ui-title": "Transaction ID",
              "ui-title-key": "transactionId"
            }
          }
        },
        "type": "object"
      },
      "com.nokia.eda.kafka.v1alpha1.Producer_DeletedResources": {
        "items": {
          "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.Producer_DeletedResourceEntry"
        },
        "type": "array"
      },
      "com.nokia.eda.kafka.v1alpha1.Producer_metadata": {
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 40,
              "ui-title": "Annotations",
              "ui-title-key": "annotations"
            }
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "x-eda-nokia-com": {
              "ui-auto-completes": [
                {
                  "condition": "true",
                  "group": "kafka.eda.nokia.com",
                  "kind": "Producer",
                  "type": "label",
                  "version": "v1alpha1"
                }
              ],
              "ui-order-priority": 30,
              "ui-title": "Labels",
              "ui-title-key": "labels"
            }
          },
          "name": {
            "maxLength": 253,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
            "type": "string",
            "x-eda-nokia-com": {
              "immutable": true,
              "ui-order-priority": 10,
              "ui-pattern-error": "A valid name is made up of one or more components where each component is separated by period characters.  Each component must start and end with a lower case alphanumeric character and the body of the component is made up of zero or more lower case alphanumeric and hyphen characters.",
              "ui-title": "Name",
              "ui-title-key": "name"
            }
          },
          "namespace": {
            "type": "string",
            "x-eda-nokia-com": {
              "immutable": true,
              "ui-order-priority": 20,
              "ui-title": "Namespace",
              "ui-title-key": "namespace"
            }
          }
        },
        "required": [
          "name",
          "namespace"
        ],
        "type": "object",
        "x-eda-nokia-com": {
          "ui-order-priority": 10,
          "ui-title": "Metadata",
          "ui-title-key": "metadata"
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "title": "Kafka Exporter Application APIs.",
    "version": "v1alpha1"
  },
  "openapi": "3.0.1",
  "paths": {
    "/apps/kafka.eda.nokia.com": {
      "get": {
        "description": "list versions available from kafka.eda.nokia.com",
        "operationId": "getVersionKafkaEdaNokiaCom",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppGroup"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/kafka.eda.nokia.com/v1alpha1": {
      "get": {
        "description": "list resources available from kafka.eda.nokia.com/v1alpha1",
        "operationId": "getResourcesKafkaEdaNokiaComV1alpha1",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/kafka.eda.nokia.com/v1alpha1/_ui/{pathname}": {
      "get": {
        "description": "get UI specification for kafka.eda.nokia.com v1alpha1",
        "operationId": "uiKafkaEdaNokiaComV1alpha1",
        "parameters": [
          {
            "description": "pathname to the UI specification to retrieve",
            "in": "path",
            "name": "pathname",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UIResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/kafka.eda.nokia.com/v1alpha1/clusterproducers": {
      "delete": {
        "description": "Delete all instances of ClusterProducer.  If ClusterProducer is a namespaced resource, all instances in all namespaces will\nbe deleted, and this is restricted to users with the system-administrator role.\nIf a non-namespaced ClusterProducer, it deletes all instances of that non-namespaced resource.",
        "operationId": "deleteAllKafkaEdaNokiaComV1alpha1Clusterproducers",
        "parameters": [
          {
            "description": "a label selector string to filter the set of CRs deleted based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.ClusterProducerList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "get": {
        "description": "The resulting resources can optionally be a subset of the resource content by using the \"fields\" query parameter.",
        "operationId": "listKafkaEdaNokiaComV1alpha1Clusterproducers",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a comma-separated list of resource fields to fetch/return.  If unspecified, all fields are fetched.  If empty, only key-fields are fetched.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "an EQL \"where\" expression that will be used to filter the set of resources returned.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the results based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.ClusterProducerList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "list clusterproducers",
        "tags": [
          "apps"
        ]
      },
      "post": {
        "description": "create a non-namespaced ClusterProducer",
        "operationId": "createKafkaEdaNokiaComV1alpha1Clusterproducers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.ClusterProducer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.ClusterProducer"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/kafka.eda.nokia.com/v1alpha1/clusterproducers/_deleted": {
      "get": {
        "operationId": "getDeletedKafkaEdaNokiaComV1alpha1Clusterproducers",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.ClusterProducer_DeletedResources"
                }
              }
            },
            "description": "Returns list of deleted resource entries"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get information about the instances of ClusterProducer that have been deleted.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/kafka.eda.nokia.com/v1alpha1/clusterproducers/{name}": {
      "delete": {
        "description": "delete the specified non-namespaced ClusterProducer",
        "operationId": "deleteKafkaEdaNokiaComV1alpha1Clusterproducers",
        "parameters": [
          {
            "description": "name of the ClusterProducer to delete",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "get": {
        "description": "read the specified non-namespaced ClusterProducer.  If a git hash query parameter\nis supplied, the resource as it existed at the time of the git hash\nwill be returned. Streaming is not supported when a particular revision\nis asked for.",
        "operationId": "readKafkaEdaNokiaComV1alpha1Clusterproducers",
        "parameters": [
          {
            "description": "name of the ClusterProducer",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "resource content will be returned as it was at the time of this git hash",
            "in": "query",
            "name": "hash",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.ClusterProducer"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "patch": {
        "description": "patch a non-namespaced ClusterProducer",
        "operationId": "patchKafkaEdaNokiaComV1alpha1Clusterproducers",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.ClusterProducer"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "put": {
        "description": "replace a non-namespaced ClusterProducer",
        "operationId": "replaceKafkaEdaNokiaComV1alpha1Clusterproducers",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.ClusterProducer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.ClusterProducer"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/kafka.eda.nokia.com/v1alpha1/clusterproducers/{name}/_revs": {
      "get": {
        "operationId": "getHistoryKafkaEdaNokiaComV1alpha1Clusterproducers",
        "parameters": [
          {
            "description": "name of the ClusterProducer to retrieve",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "maximum number of history entries to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "format": "uint64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceHistory"
                }
              }
            },
            "description": "Returns the change history of the specified resource"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get revision history for the specified non-namespaced ClusterProducer.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/kafka.eda.nokia.com/v1alpha1/clusterproducers/{name}/_topology": {
      "get": {
        "operationId": "getTopologyKafkaEdaNokiaComV1alpha1Clusterproducers",
        "parameters": [
          {
            "description": "name of the ClusterProducer to retrieve",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the type of topology to retrieve",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "childrenAndParents",
              "enum": [
                "children",
                "parents",
                "childrenAndParents",
                "dependentCrs"
              ],
              "type": "string"
            }
          },
          {
            "description": "whether to recursively build the topology to include all layers or just a single layer of the topology",
            "in": "query",
            "name": "recurse",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceTopology"
                }
              }
            },
            "description": "Returns the topology of the specified resource"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get the topology for the specified non-namespaced ClusterProducer.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/kafka.eda.nokia.com/v1alpha1/namespaces/{namespace}/producers": {
      "delete": {
        "operationId": "deleteAllKafkaEdaNokiaComV1alpha1NamespaceProducers",
        "parameters": [
          {
            "description": "the namespace scope from which to perform the delete",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the set of CRs deleted based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.ProducerList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Delete all instances of Producer in the specified namespace.",
        "tags": [
          "apps"
        ]
      },
      "get": {
        "description": "The resulting resources can optionally be a subset of the resource content by using the \"fields\" query parameter.",
        "operationId": "listKafkaEdaNokiaComV1alpha1NamespaceProducers",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a comma-separated list of resource fields to fetch/return.  If unspecified, all fields are fetched.  If empty, only key-fields are fetched.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "an EQL \"where\" expression that will be used to filter the set of resources returned.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the results based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.ProducerList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "list producers in namespace",
        "tags": [
          "apps"
        ]
      },
      "post": {
        "description": "create a Producer",
        "operationId": "createKafkaEdaNokiaComV1alpha1NamespaceProducers",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.Producer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.Producer"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/kafka.eda.nokia.com/v1alpha1/namespaces/{namespace}/producers/_deleted": {
      "get": {
        "operationId": "getDeletedKafkaEdaNokiaComV1alpha1NamespaceProducers",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.Producer_DeletedResources"
                }
              }
            },
            "description": "Returns list of deleted resource entries"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get information about the instances of Producer that have been deleted that existed in the specified namespace.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/kafka.eda.nokia.com/v1alpha1/namespaces/{namespace}/producers/{name}": {
      "delete": {
        "description": "delete the specified Producer",
        "operationId": "deleteKafkaEdaNokiaComV1alpha1NamespaceProducers",
        "parameters": [
          {
            "description": "the namespace scope from which to perform the delete",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of the Producer to delete",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "get": {
        "description": "read the specified Producer.  If a git hash query parameter\nis supplied, the resource as it existed at the time of the git hash\nwill be returned. Streaming is not supported when a particular revision\nis asked for.",
        "operationId": "readKafkaEdaNokiaComV1alpha1NamespaceProducers",
        "parameters": [
          {
            "description": "name of the Producer",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "resource content will be returned as it was at the time of this git hash",
            "in": "query",
            "name": "hash",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.Producer"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "patch": {
        "description": "patch a Producer",
        "operationId": "patchKafkaEdaNokiaComV1alpha1NamespaceProducers",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.Producer"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "put": {
        "description": "replace a Producer",
        "operationId": "replaceKafkaEdaNokiaComV1alpha1NamespaceProducers",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.Producer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.Producer"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/kafka.eda.nokia.com/v1alpha1/namespaces/{namespace}/producers/{name}/_revs": {
      "get": {
        "operationId": "getHistoryKafkaEdaNokiaComV1alpha1NamespaceProducers",
        "parameters": [
          {
            "description": "name of the Producer to retrieve",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope from which to retrieve the result",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "maximum number of history entries to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "format": "uint64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceHistory"
                }
              }
            },
            "description": "Returns the change history of the specified resource"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get revision history for the specified namespaced Producer.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/kafka.eda.nokia.com/v1alpha1/namespaces/{namespace}/producers/{name}/_topology": {
      "get": {
        "operationId": "getTopologyKafkaEdaNokiaComV1alpha1NamespaceProducers",
        "parameters": [
          {
            "description": "name of the Producer to retrieve",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope from which to retrieve the result",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the type of topology to retrieve",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "childrenAndParents",
              "enum": [
                "children",
                "parents",
                "childrenAndParents",
                "dependentCrs"
              ],
              "type": "string"
            }
          },
          {
            "description": "whether to recursively build the topology to include all layers or just a single layer of the topology",
            "in": "query",
            "name": "recurse",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceTopology"
                }
              }
            },
            "description": "Returns the topology of the specified resource"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get the topology for the specified namespaced Producer.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/kafka.eda.nokia.com/v1alpha1/producers": {
      "get": {
        "description": "The resulting resources can optionally be a subset of the resource content by using the \"fields\" query parameter.",
        "operationId": "listKafkaEdaNokiaComV1alpha1Producers",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a comma-separated list of resource fields to fetch/return.  If unspecified, all fields are fetched.  If empty, only key-fields are fetched.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "an EQL \"where\" expression that will be used to filter the set of resources returned.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the results based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.kafka.v1alpha1.ProducerList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "list producers",
        "tags": [
          "apps"
        ]
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}